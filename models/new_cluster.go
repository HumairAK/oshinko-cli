package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*NewCluster new cluster

swagger:model NewCluster
*/
type NewCluster struct {

	/* The count of master nodes requested in the cluster

	Required: true
	*/
	MasterCount *int32 `json:"master-count"`

	/* Unique name for the cluster

	Required: true
	*/
	Name *string `json:"name"`

	/* The count of worker nodes requested in the cluster

	Required: true
	*/
	WorkerCount *int32 `json:"worker-count"`
}

// Validate validates this new cluster
func (m *NewCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMasterCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkerCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewCluster) validateMasterCount(formats strfmt.Registry) error {

	if err := validate.Required("master-count", "body", m.MasterCount); err != nil {
		return err
	}

	return nil
}

func (m *NewCluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NewCluster) validateWorkerCount(formats strfmt.Registry) error {

	if err := validate.Required("worker-count", "body", m.WorkerCount); err != nil {
		return err
	}

	return nil
}
